{"version":3,"sources":["services/pokemonApi.js","actions/pokeActions.js","components/PokemonInfo.jsx","App.js","reportWebVitals.js","reducers/pokeReducer.js","reducers/index.js","store/index.js","index.js"],"names":["getAllPokemons","limit","offset","a","fetch","getData","json","getPokemons","getInfoPokemons","url","GET_POKEMONS","GET_POKEMONS_SUCESS","GET_POKEMONS_ERROR","SELECT_POKEMON","GET_POKEMONS_INFO","GET_POKEMONS_INFO_SUCESS","GET_POKEMONS_INFO_ERROR","GET_POKEMONS_INFO_COMPLETE","getPokemonsThunk","dispatch","type","responseApi","then","res","results","payload","pokemons","forEach","pokemon","push","length","getPokemonsInfoSucess","pokemonsInfo","catch","PokemonInfo","info","this","props","name","className","src","sprites","front_default","alt","base_experience","weight","stats","map","stat","base_stat","Component","App","nextPokemons","event","target","state","innerHTML","setAttribute","setState","previousState","previousPokemons","getPokemonsInfo","selectPokemon","select","id","pokemonFound","find","selectedPokemon","isLoading","onClick","htmlFor","value","connect","pokeReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","error","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8f06d7d.chunk.js","sourcesContent":["export const getAllPokemons = async (limit, offset) => {\n  try {\n    const getData = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}.`);\n    const getPokemons = await getData.json();\n    return getPokemons;\n  } catch(error) {\n    return error;\n  }\n};\n\nexport const getInfoPokemons = async (url) => {\n  try {\n    const getData = await fetch(url);\n    const getPokemons = await getData.json();\n    return getPokemons;\n  } catch(error) {\n    return error;\n  }\n};","import { getAllPokemons, getInfoPokemons } from '../services/pokemonApi';\n\nexport const GET_POKEMONS = 'GET_POKEMONS';\nexport const GET_POKEMONS_SUCESS = 'GET_POKEMONS_SUCESS';\nexport const GET_POKEMONS_ERROR = 'GET_POKEMONS_ERROR';\nexport const SELECT_POKEMON = 'SELECT_POKEMON';\nexport const GET_POKEMONS_INFO = 'GET_POKEMONS_INFO';\nexport const GET_POKEMONS_INFO_SUCESS = 'GET_POKEMONS_INFO_SUCESS';\nexport const GET_POKEMONS_INFO_ERROR = 'GET_POKEMONS_INFO_ERROR';\nexport const GET_POKEMONS_INFO_COMPLETE = 'GET_POKEMONS_INFO_COMPLETE';\n\nexport const getPokemons = () => ({\n  type: GET_POKEMONS,\n});\n\nexport const getPokemonsSucess = (payload) => ({\n  type: GET_POKEMONS_SUCESS,\n  payload\n});\n\nexport const getPokemonsError = (payload) => ({\n  type: GET_POKEMONS_ERROR,\n  payload,\n});\n\nexport const getPokemonsInfo = () => ({\n  type: GET_POKEMONS_INFO,\n});\n\nexport const getPokemonsInfoSucess = (payload) => ({\n  type: GET_POKEMONS_INFO_SUCESS,\n  payload\n});\n\nexport const getPokemonsInfoError = (payload) => ({\n  type: GET_POKEMONS_INFO_ERROR,\n  payload\n});\n\nexport const getPokemonsInfoComplete = () => ({\n  type: GET_POKEMONS_INFO_COMPLETE,\n});\n\n\nexport const getPokemonsThunk = (limit, offset) => (dispatch) => {\n  // is loading true\n  dispatch(getPokemons());\n  const responseApi = [];\n  // chama a api\n  getAllPokemons(limit, offset)\n    .then((res) => { // deu certo a chamada da api\n      const { results } = res;\n      dispatch(getPokemonsSucess({\n        pokemons: results,\n      })); // atualizar o estado global\n      results.forEach((pokemon) => {\n        getInfoPokemons(pokemon.url)\n        .then((res) => { // deu certo a chamada da api\n          responseApi.push(res)\n          if(responseApi.length > 19) {\n            dispatch(getPokemonsInfoSucess({\n              pokemonsInfo: responseApi,\n            })); // atualizar o estado global\n            dispatch(getPokemonsInfoComplete());\n          }\n          })\n      })\n    })\n    .catch(() => { getPokemonsError(); }); // atualizar o estado global com erro\n};\n\n//  const getPokemonsInfoThunk = (url) => (dispatch) => {\n//   // is loading true\n//   // dispatch(getPokemons());\n\n//   // chama a api\n//   getInfoPokemons(url)\n//   .then((res) => { // deu certo a chamada da api\n//       dispatch(getPokemonsInfoSucess({\n//         pokemonsInfo: res,\n//       })); // atualizar o estado global\n//     })\n//     .catch(() => { getPokemonsError(); }); // atualizar o estado global com erro\n// };\n\n\nexport const selectPokemon = (payload) => ({\n  type: SELECT_POKEMON,\n  payload,\n});\n","import React, { Component } from 'react';\nimport './pokemonInfo.css';\n\nclass PokemonInfo extends Component {\n  render() {\n    const { info } = this.props;\n    if (!info.name) return <div>Select an Pokemon to see more information about it...</div>\n    return (\n      <div className=\"pokemon-card\">\n        <div>\n         <p>{info.name}</p>\n         <img src={info.sprites.front_default} alt={info.name} />\n         <p>{`Base experience: ${info.base_experience} points`}</p>\n         <p>{`Weight: ${info.weight}`}</p>\n         {info.stats.map((pokemon) => (\n           <p key={`${info.name}${pokemon.stat.name}`}>{`${pokemon.stat.name}: ${pokemon.base_stat} points`}</p>\n         ))}\n        </div>\n      \n      </div>\n    );\n  }\n}\n\nexport default PokemonInfo;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport {selectPokemon, getPokemonsThunk} from './actions/pokeActions';\nimport PokemonInfo from './components/PokemonInfo';\n\nclass App extends Component {\nconstructor() {\n  super();\n  this.state = {\n    limit: 20,\n    offset: 0,\n    // firstPokemons: 'There are no more pokemons...',\n    // lastPokemons: 'There are no more pokemons...',\n  }\n}\n\n  componentDidMount() {\n    const { getPokemons } = this.props;\n    const{ limit, offset } = this.state;\n    getPokemons(limit, offset);\n  }\n\n  nextPokemons = async (event) => {\n    const { target } = event;\n    if (this.state.offset === 480) {\n      target.innerHTML = 'No have more pokemons...';\n      return target.setAttribute('disable', '');\n    }\n    const { getPokemons } = this.props;\n    await this.setState((previousState) => ({\n      offset: previousState.offset + 20,\n    }), async () => {\n      if (this.state.offset > 480) {\n        await this.setState({ offset: 480 })\n      }\n    });\n    const { offset, limit } = this.state;\n    getPokemons(limit, offset);\n  }\n\n  previousPokemons = async (event) => {\n    const { target } = event;\n    const { getPokemons } = this.props;\n    if (this.state.offset === 0) {\n      target.innerHTML = 'Here are the first pokemons...';\n      return target.setAttribute('disable', '');\n    }\n    await this.setState((previousState) => ({\n      offset: previousState.offset - 20,\n    }));\n    const { offset, limit } = this.state;\n    getPokemons(limit, offset);\n  }\n\n  pokemonsInfo = async (url) => {\n    const { getPokemonsInfo } = this.props;\n    getPokemonsInfo(url);\n  }\n\n  selectPokemon = (event) => {\n    const { pokemonsInfo, select } = this.props;\n    const { id } = event.target;\n    const pokemonFound = pokemonsInfo.find((pokemon) => {\n      return pokemon.name === id\n    });\n    if (pokemonFound) select(pokemonFound);\n    \n  }\n  \n  render() {\n    const { pokemons, selectedPokemon, isLoading, pokemonsInfo } = this.props;\n    if (isLoading) return (\n      <div className=\"App\">\n       <h2>Welcome to Pokemon game!</h2>       \n       <h3>Here you will find a lot of information about each pokemon. We have a list of 500 pokemons.</h3>\n       <h2>To start select a pokemon...</h2>\n       <div className=\"card\">\n       <h3>Pokemon selecionado:<PokemonInfo info = {selectedPokemon} /></h3>\n       </div>\n       <h2>Loading Pokemons...</h2>\n       <h2>Created By Felipe Flores</h2>\n       </div>\n    );\n    return (\n      <div className=\"App\">\n       <h2>Welcome to Pokemon game!</h2>       \n       <h3>Here you will find a lot of information about each pokemon. We have a list of 500 pokemons.</h3>\n       <h2>To start select a pokemon...</h2>\n       <div className=\"card\">\n       <h3>Pokemon selecionado:<PokemonInfo info = {selectedPokemon} /></h3>\n       </div>\n       <button type='button' className=\"page-button\" onClick={this.previousPokemons}>See previous pokemons...</button>\n       <button type='button' className=\"page-button\" onClick={this.nextPokemons}>See next pokemons...</button>\n       <div className=\"pokemon-cards\">\n       { pokemonsInfo.map((pokemon) => (\n         <label key={pokemon.name} htmlFor={pokemon.name}>\n            <div className=\"pokeCard\" >\n             <input className=\"input-radio pokeCard pokemons\" id={pokemon.name} onClick={this.selectPokemon} name=\"selected\" type=\"radio\" value={pokemon.name}/>\n           {/* <div className=\"pokemons\" key={pokemon.name}> */}\n             <h3>{`Click here to select ${pokemon.name}...`}</h3>\n             <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n            </div>\n         {/* </div> */}\n         </label>\n       )) }\n       </div>\n       <h2>Created By Felipe Flores</h2>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getPokemons: (limit, offset) => dispatch(getPokemonsThunk(limit, offset)),\n  select: (pokemon) => dispatch(selectPokemon(pokemon)),\n});\n\nconst mapStateToProps = ({pokeReducer: { pokemons, selectedPokemon, isLoading, pokemonsInfo }}) => ({\n  isLoading,\n  pokemons,\n  selectedPokemon,\n  pokemonsInfo,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  GET_POKEMONS,\n  GET_POKEMONS_SUCESS,\n  GET_POKEMONS_ERROR,\n  SELECT_POKEMON,\n  GET_POKEMONS_INFO,\n  GET_POKEMONS_INFO_SUCESS,\n  GET_POKEMONS_INFO_ERROR,\n  GET_POKEMONS_INFO_COMPLETE,\n} from '../actions/pokeActions';\n\nconst INITIAL_STATE = {\n  isLoading: false,\n  error: null,\n  pokemons: [],\n  pokemonsInfo: [],\n  selectedPokemon: {},\n};\n\nfunction pokeReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {...state, isLoading: true};\n      case GET_POKEMONS_SUCESS:\n        return {...state, pokemons: action.payload.pokemons };\n      case GET_POKEMONS_ERROR:\n      return {...state, isLoading: false, error: action.payload.error };\n      case GET_POKEMONS_INFO:\n      return {...state, isLoading: true};\n      case GET_POKEMONS_INFO_SUCESS:\n      return {...state, pokemonsInfo: action.payload.pokemonsInfo };\n      case GET_POKEMONS_INFO_ERROR:\n      return {...state, isLoading: false, error: action.payload.error };\n      case GET_POKEMONS_INFO_COMPLETE:\n      return {...state, isLoading: false };\n    case SELECT_POKEMON:\n      return {...state, selectedPokemon: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport default pokeReducer;","import { combineReducers } from 'redux';\nimport pokeReducer from './pokeReducer';\n\nconst rootReducer = combineReducers({pokeReducer});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers/index';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}